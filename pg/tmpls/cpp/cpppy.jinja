<% import "cpp/render.jinja" as render -%>
// this file is autogenerated, don't edit this
// this file contains realization of helpers function

#include <cassert>
#include <pybind11/pybind11.h>
<= render.includes(cdata.incs) =>

<%- macro module_name(mod) %><= mod.name =>_<= mod.v.major =><= mod.v.minor =><% endmacro %>
<%- macro obj_ref(obj, mod, cdata) %><= render.gen_namespace_name(mod, cdata) =>::<= obj.name =><% endmacro %>
<%- macro def_class(obj,mod,cdata) %>
	pybind11::class_<<= obj_ref(obj,mod,cdata) =>>(m, "<= obj.name =>")
		<%- for cns in obj.constructors %>
		.def(pybind11::init(&<=render.gen_namespace_name(mod,cdata)=>::<= render.constructor_name(cns,obj,cdata) =>))<% endfor %>
		<%- for mem in obj.members %>
		.def("<=mem.name=>", &<=obj_ref(obj,mod,cdata)=>::<=mem.name=>)<% endfor %>
		;
<% endmacro -%>
<%- macro def_enum(obj,mod,cdata) %>
	pybind11::enum_<<= obj_ref(obj,mod,cdata) =>>(m, "<= obj.name =>")
		<%- for mem in obj.members %>
		.value("<= mem.name =>", <= obj_ref(obj,mod,cdata) =>::<= mem.name =>)<% endfor %>
		;
<% endmacro %>

<% for module in cdata.mods -%>

<= render.decl_meta_params(module) =>
PYBIND11_MODULE(<= module_name(module) =>, m) {
	<%- for obj in module.content -%>
	<% if obj.type == "function" -%>m.def("<= obj.name =>", &<= obj_ref(obj, module, cdata) =>, "<= obj.docs =>");<%- endif %>
	<% if obj.type == "interface" -%><= def_class(obj,module,cdata) =><%- endif %>
	<% if obj.type == "enumeration" -%><= def_enum(obj,module,cdata) =><%- endif %>
	<% endfor %>
}

<% endfor %>

