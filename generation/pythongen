#!/usr/bin/env python3

import os, sys, getopt
import json
import jinja2
import importlib.util

jinja_env = jinja2.Environment(
    block_start_string = '<%',
    block_end_string = '%>',
    variable_start_string = '<=',
    variable_end_string = '=>',
    comment_start_string = '<*',
    comment_end_string = '*>',
    loader = jinja2.FileSystemLoader(os.path.abspath('.'))
)

def print_help():
	print("usage ./jt.py -d data_file -t template_file -o output_file")
	print("got ", sys.argv)
	sys.exit()

def parse_extra_data(ex):
	print("got extra data ", ex)
	for name, value in ex.items():
		if 'script' in value:
			exec(value['script'])
			jinja_env.globals[value['name']] = locals()[value['name']]
		elif 'file' in value:
			spec = importlib.util.spec_from_file_location(value['name'], value['file'])
			mod = importlib.util.module_from_spec(spec)
			spec.loader.exec_module(mod)
			jinja_env.globals[value['name']] = getattr(mod, value['name'])

if __name__ == '__main__':

	argv = sys.argv[1:]

	data_file = '-';
	output = '-';
	tmpl_file = 'tmpl';

	try:
		opts, args = getopt.getopt(argv,"hd:t:o:",["data_file=","template_file=", "output_file="])
	except getopt.GetoptError:
		print_help()

	for opt, arg in opts:
		if opt  == '-h':
			print_help()
		elif opt in ("-d", "--data_file"):
			data_file = arg
		elif opt in ("-t", "--template_file"):
			tmpl_file = arg
		elif opt in ("-o", "--output_file"):
			output = arg

	if not os.path.isfile(tmpl_file):
		print_help()

	if data_file == '-':
		data = json.loads(sys.stdin.read())
	else:
		data = json.loads(open(data_file).read())

	if "extra_data" in data:
		parse_extra_data(data["extra_data"])

	jinja_env.loader = jinja2.FileSystemLoader(os.path.dirname(tmpl_file))
	# jinja cannot load file if tmp_file contains path :(
	#template = jinja_env.get_template(tmpl_file)
	template = jinja_env.from_string(open(tmpl_file).read())
	render_template = template.render(cdata=data["tmpl_data"]) # pass in all jinja vars as a big dictionary

	if(output == '-'):
		print(render_template)
	else:
		open(output, 'w').write(render_template)

