<% import "cpp/render.jinja" as render -%>
// this file is autogenerated, don't edit this
// this file contains realization of helpers function

#include <cassert>
#include <pybind11/pybind11.h>
<= render.includes(cdata.includes) =>

<% for module in cdata.data.ix3 -%>
<% for mod_ver in module.vers %>

<%- macro module_name(mod) %><= mod.name =>_<= mod.v.major =><= mod.v.minor =><% endmacro %>
<%- macro obj_ref(obj, mod, mod_ver) %><= render.gen_namespace_name(mod, mod_ver) =>::<= obj.name =><% endmacro %>
<%- macro def_class(obj,mod,cdata) %>
	pybind11::class_<<= obj_ref(obj,mod,cdata) =>>(m, "<= obj.name =>")
		<%- for cns in obj.ctors %>
		.def(pybind11::init(&<=render.gen_namespace_name(mod,cdata)=>::<= render.constructor_name(cns,obj,cdata) =>))<% endfor %>
		<%- for mem in obj.funcs %>
		.def("<=mem.name=>", &<=obj_ref(obj,mod,cdata)=>::<=mem.name=>)<% endfor %>
		;
<% endmacro -%>
<%- macro def_struct(obj,mod,cdata) %>
	pybind11::class_<<= obj_ref(obj,mod,cdata) =>>(m, "<= obj.name =>")
		.def(py::init())
		<%- for f in obj.fields %>
		.def_readwrite("<=f.name=>", &<=obj_ref(obj,mod,cdata)=>::<=f.name=>)<% endfor %>
		;
<% endmacro -%>
<%- macro def_enum(obj,mod,cdata) %>
	pybind11::enum_<<= obj_ref(obj,mod,cdata) =>>(m, "<= obj.name =>")
		<%- for mem in obj.members %>
		.value("<= mem.name =>", <= obj_ref(obj,mod,cdata) =>::<= mem.name =>)<% endfor %>
		;
<% endmacro %>

PYBIND11_MODULE(<= module.name =>_<= mod_ver.major =>_<= mod_ver.minor =>, m) {
	<% for obj in mod_ver.content -%>
	<%- if obj.type == "function" -%>m.def("<= obj.name =>", &<= obj_ref(obj, module, mod_ver) =>, "<= obj.docs =>");
	<% endif %>
	<%- if obj.type == "interface" -%><= def_class(obj,module,mod_ver) =><%- endif %>
	<%- if obj.type == "record" -%><= def_struct(obj,module,mod_ver) =><%- endif %>
	<%- if obj.type == "enum" -%><= def_enum(obj,module,mod_ver) =><%- endif %>
	<%- endfor %>
}

<% endfor %>
<% endfor %>

