<% macro type(obj) -%>
<= obj.name =><% if obj.sub[0] is defined %><<% for st in obj.sub %><= type(st) =><= ", " if not loop.last =><% endfor %>><% endif %>
<%- endmacro %>

<%- macro fparam(params) -%>
<% for param in params %><= type(param.par_type) => <= param.name =><= ", " if not loop.last =><% endfor %>
<%- endmacro %>

<%- macro gen_namespace_name(module) -%>
<= module.name =>_v<= module.v.major =>_<= module.v.minor =>
<%- endmacro %>

<%- macro decl_depricated(obj) -%>
<%- if obj.depricated %>[[depricated<% if obj.depricated.message != '' %>("<= obj.depricated.message =>")<% endif %>]] <% endif %>
<%- endmacro %>

<%- macro decl_meta_params(mparams) -%>
<%- if mparams.docs -%>///  <= mparams.docs =>
<% endif -%>
<%- endmacro %>

<%- macro function_header(obj) -%>
<= decl_meta_params(obj) -=>
<= decl_depricated(obj) -=>
<= "static " if obj.static =><=- type(obj.ret_type) => <= obj.name =>(<= fparam(obj.params) =>)<= " const" if obj.mutable == False =>
<%- endmacro %>

<%- macro includes(incs) -%>
<%- for inc in incs %>
#include <= '"' if inc.local else '<' =><= inc.n =><= '"' if inc.local else '>' =>
<%- endfor -%>
<%- endmacro -%>
