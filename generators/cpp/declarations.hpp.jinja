<% import "render.jinja" as render -%>
// this file is autogenerated, don't edit this
#pragma once

#include <memory>
<% for module in cdata.mods %>
namespace <= render.gen_namespace_name(module) => {
	<%- for obj in module.content %>
	<% if obj.type == "function" -%>
		 <=- render.type(obj.ret_type) => <= obj.name =>(<= render.fparam(obj.params) =>);
	<%- elif obj.type == "enumeration" -%>
	enum class <= obj.name =>
	{
		<% for mem in obj.members -%> <= mem.name =>  <=- ", " if not loop.last => <%- endfor %>
	};
	<% if obj.gen_io -%>
	std::string to_string(<= obj.name => v);
	std::string to_wstring(<= obj.name => v);
	template<typename S> S& operator << (S& out, <= obj.name => o) { out << to_string(o); return out; }
	<%- endif -%>
	<%- elif obj.type == "interface" -%>
	class <= obj.name => ;
	using <= obj.name =>_ptr = std::shared_ptr<<= obj.name =>>;
	<%- elif obj.type == "record" -%>
	struct <= obj.name => ;
	<%- else -%> #error unknown derective <= obj.name => <%- endif -%>
	<%- endfor %>
} // namespace <= module.name =>
<% endfor %>

